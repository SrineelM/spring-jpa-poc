###############################################################################
# Production / Enterprise profile                                             #
# Hardened settings: external DB, reduced verbosity, limited actuator,        #
# partial tracing sampling, environment / secret sourced credentials.         #
###############################################################################

spring:
  profiles: prod
  datasource:
    url: ${DB_URL:jdbc:postgresql://db-host:5432/app}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USER:app_user}
    password: ${DB_PASSWORD:changeMe}
    hikari:
      maximum-pool-size: ${DB_POOL_MAX:20}
      minimum-idle: ${DB_POOL_MIN:5}
      connection-timeout: 30000
      validation-timeout: 5000
      leak-detection-threshold: 60000
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        format_sql: false
        jdbc.time_zone: UTC
  h2:
    console:
      enabled: false

logging:
  level:
    root: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN

management:
  server:
    port: ${MANAGEMENT_PORT:9090}
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
      roles: ADMIN
      group:
        liveness:
          include: ping
        readiness:
          include: db,circuitBreakers
  tracing:
    sampling:
      probability: ${TRACING_SAMPLING:0.1}
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_ENDPOINT:http://zipkin:9411/api/v2/spans}

# JWT secret MUST come from environment or secret store
app:
  jwt-secret: ${JWT_SECRET:PLEASE_OVERRIDE_IN_SECURE_STORE}

# Security headers (can also be enforced via reverse proxy)
server:
  servlet:
    session:
      cookie:
        secure: true
        http-only: true
        same-site: LAX
  forward-headers-strategy: framework

# Graceful shutdown alignment
spring:
  lifecycle:
    timeout-per-shutdown-phase: 30s

# Resilience overrides (example - can be tuned with env vars already in base)
resilience4j:
  circuitbreaker:
    instances:
      myCircuitBreaker:
        failureRateThreshold: ${CB_FAILURE_THRESHOLD:50}
  retry:
    instances:
      myRetry:
        maxAttempts: ${RETRY_MAX_ATTEMPTS:3}

# Logging/metrics privacy & performance notes:
# - Consider adding log masking / PII scrubbing.
# - Ensure prometheus endpoint protected (network or auth layer).
